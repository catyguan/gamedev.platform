<?php/** *  @generated */namespace ge\lua\service\thrift;class TLuaAppHostManagerClient implements \ge\lua\service\thrift\TLuaAppHostManagerIf {  protected $input_ = null;  protected $output_ = null;  protected $seqid_ = 0;  public function __construct($input, $output=null) {    $this->input_ = $input;    $this->output_ = $output ? $output : $input;  }  public function createApp($appId, $appType)  {    $this->send_createApp($appId, $appType);    return $this->recv_createApp();  }  public function send_createApp($appId, $appType)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_createApp_args();    $args->appId = $appId;    $args->appType = $appType;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'createApp', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('createApp', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_createApp()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_createApp_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_createApp_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("createApp failed: unknown result");  }  public function restartApp($appId)  {    $this->send_restartApp($appId);    return $this->recv_restartApp();  }  public function send_restartApp($appId)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_restartApp_args();    $args->appId = $appId;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'restartApp', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('restartApp', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_restartApp()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_restartApp_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_restartApp_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("restartApp failed: unknown result");  }  public function closeApp($appId, $destroy)  {    $this->send_closeApp($appId, $destroy);    return $this->recv_closeApp();  }  public function send_closeApp($appId, $destroy)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_closeApp_args();    $args->appId = $appId;    $args->destroy = $destroy;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'closeApp', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('closeApp', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_closeApp()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_closeApp_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_closeApp_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("closeApp failed: unknown result");  }  public function getApp($appId)  {    $this->send_getApp($appId);    return $this->recv_getApp();  }  public function send_getApp($appId)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_getApp_args();    $args->appId = $appId;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'getApp', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('getApp', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_getApp()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_getApp_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_getApp_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("getApp failed: unknown result");  }  public function listApp()  {    $this->send_listApp();    return $this->recv_listApp();  }  public function send_listApp()  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_listApp_args();    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'listApp', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('listApp', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_listApp()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_listApp_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_listApp_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("listApp failed: unknown result");  }  public function appCall($appId, $name, $params)  {    $this->send_appCall($appId, $name, $params);    return $this->recv_appCall();  }  public function send_appCall($appId, $name, $params)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_appCall_args();    $args->appId = $appId;    $args->name = $name;    $args->params = $params;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'appCall', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('appCall', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_appCall()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_appCall_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_appCall_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("appCall failed: unknown result");  }  public function appAICall($appId, $name, $params, $timeout)  {    $this->send_appAICall($appId, $name, $params, $timeout);    return $this->recv_appAICall();  }  public function send_appAICall($appId, $name, $params, $timeout)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_appAICall_args();    $args->appId = $appId;    $args->name = $name;    $args->params = $params;    $args->timeout = $timeout;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'appAICall', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('appAICall', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_appAICall()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_appAICall_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_appAICall_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("appAICall failed: unknown result");  }  public function appCommand($appId, $caseName, $methodName, $session, $params, $timeout)  {    $this->send_appCommand($appId, $caseName, $methodName, $session, $params, $timeout);    return $this->recv_appCommand();  }  public function send_appCommand($appId, $caseName, $methodName, $session, $params, $timeout)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_appCommand_args();    $args->appId = $appId;    $args->caseName = $caseName;    $args->methodName = $methodName;    $args->session = $session;    $args->params = $params;    $args->timeout = $timeout;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'appCommand', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('appCommand', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_appCommand()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_appCommand_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_appCommand_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("appCommand failed: unknown result");  }  public function appEval($appId, $content)  {    $this->send_appEval($appId, $content);    return $this->recv_appEval();  }  public function send_appEval($appId, $content)  {    $args = new \ge\lua\service\thrift\TLuaAppHostManager_appEval_args();    $args->appId = $appId;    $args->content = $content;    $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');    if ($bin_accel)    {      thrift_protocol_write_binary($this->output_, 'appEval', \TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());    }    else    {      $this->output_->writeMessageBegin('appEval', \TMessageType::CALL, $this->seqid_);      $args->write($this->output_);      $this->output_->writeMessageEnd();      $this->output_->getTransport()->flush();    }  }  public function recv_appEval()  {    $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ge\lua\service\thrift\TLuaAppHostManager_appEval_result', $this->input_->isStrictRead());    else    {      $rseqid = 0;      $fname = null;      $mtype = 0;      $this->input_->readMessageBegin($fname, $mtype, $rseqid);      if ($mtype == \TMessageType::EXCEPTION) {        $x = new \TApplicationException();        $x->read($this->input_);        $this->input_->readMessageEnd();        throw $x;      }      $result = new \ge\lua\service\thrift\TLuaAppHostManager_appEval_result();      $result->read($this->input_);      $this->input_->readMessageEnd();    }    if ($result->success !== null) {      return $result->success;    }    return $result->success; //     throw new \Exception("appEval failed: unknown result");  }}?>